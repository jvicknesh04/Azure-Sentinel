Parser:
    Title: Audit Event ASIM filtering parser for Microsoft GithubWebhook audit events
    Version: "0.1.1"
    LastUpdated: Apr 30 2024
Product:
    Name: Microsoft GithubWebhook
Normalization:
    Schema: AuditEvent
    Version: "0.1"
References:
    - Title: ASIM Audit Event Schema
      Link: https://aka.ms/ASimAuditEventDoc
    - Title: ASIM
      Link: https://aka.ms/AboutASIM
    - Title: Microsoft GithubWebhook Events product documentation
      Link: https://docs.github.com/en/webhooks/webhook-events-and-payloads
Description: |
    This ASIM parser supports filtering and normalizing Microsoft Github audit events in the Githubscanaudit_C.
ParserName: vimAuditEventMicrosoftGithubWebhook
EquivalentBuiltInParser: _Im_AuditEvent_MicrosoftGithubWebhook
ParserParams:
    - Name: starttime
      Type: datetime
      Default: datetime(null)
    - Name: endtime
      Type: datetime
      Default: datetime(null)
    - Name: srcipaddr_has_any_prefix
      Type: dynamic
      Default: dynamic([])
    - Name: actorusername_has_any
      Type: dynamic
      Default: dynamic([])
    - Name: operation_has_any
      Type: dynamic
      Default: dynamic([])
    - Name: eventtype_in
      Type: dynamic
      Default: dynamic([])
    - Name: eventresult
      Type: string
      Default: "*"
    - Name: object_has_any
      Type: dynamic
      Default: dynamic([])
    - Name: newvalue_has_any
      Type: dynamic
      Default: dynamic([])
    - Name: disabled
      Type: bool
      Default: false
ParserQuery: |
let parser = (
      starttime: datetime=datetime(null),
      endtime: datetime=datetime(null),
      eventresult: string='*',
      newvalue_has_any: dynamic=dynamic([]),
      operation_has_any: dynamic=dynamic([]),
      actorusername_has_any: dynamic=dynamic([]),
      disabled: bool=false)
{
    let EventDetailslookup=datatable(EventOriginalType:string,EventResult:string, EventType:string, EventSeverity:string)
     ["push","Success","Install","Informational",
      "create","Success","Create","Informational",
      "delete","Success","Delete","Informational",
      "repository","Success","Other","Informational",
      "pull_request","Success","Other","Informational",
      "membership","Success","Other","Informational",
      "member","Success","Other","Informational",
      "fork","Success","Create","Informational",
      "installation","Success","Create","Informational",
      "team","Success","Create","Informational",
      "organization","Success","Other","Informational",
      "label","Success","Other","Informational"
      ];
      githubscanaudit_CL
     | where not(disabled)
     | extend TimeGenerated = todatetime(tostring(split(TimeGenerated, '.', 0)[0]))
      //  -- Pre filtering
     | where (isnull(starttime) or TimeGenerated >= starttime) and (isnull(endtime) or TimeGenerated <= endtime)
     | where (array_length(actorusername_has_any) == 0 or sender_s  has_any (actorusername_has_any))
     |extend Object=case(event_s == "repository","Repository",
      event_s =="organization","Organization",
      event_s=="create","Branch",
      event_s=="push","Branch",
      event_s =="installation","Application",
      event_s == "pull_request","Repository","")
     |project 
     TimeGenerated,
     ActorUsername = tostring(parse_json(sender_s).login),
     EventReportUrl = tostring(parse_json(repository_s).url),
     TargetAppName = tostring(parse_json(installation_s).app_slug),   
     team_s = tostring(parse_json(team_s).name),
     invitation_s = tostring(parse_json(invitation_s).login),
     organization_s = tostring(parse_json(organization_s).login),   
     EventCount=int(1),
     EventSchema='AuditEvent',
     EventProduct='GithubWebhook',
     EventVendor='Microsoft',
     EventSchemaVersion='0.1',
     Dvc='GithubWebhook',
     EventStartTime=TimeGenerated,
     EventEndTime=TimeGenerated,
     Operation=action_s,
     Type,
     NewValue=tostring(parse_json(repository_s).name),
     ObjectId = tostring(parse_json(repository_s).id),
     EventUid=_ItemId,
     EventOriginalType=event_s,
     Object
    |lookup EventDetailslookup on EventOriginalType
    |extend User = ActorUsername,
            Application =TargetAppName
    |extend AdditionalFields = bag_pack("Team",team_s,
                                  "Invitation",invitation_s,
                                  "Organization",organization_s)
};
  parser
  ( 
      starttime=starttime,
      endtime=endtime,
      eventresult=eventresult,
      newvalue_has_any=newvalue_has_any,
      operation_has_any=operation_has_any,
      actorusername_has_any=actorusername_has_any,
      disabled=disabled
  )